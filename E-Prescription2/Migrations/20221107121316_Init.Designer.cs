// <auto-generated />
using System;
using E_Prescription2.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Prescription2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221107121316_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("E_Prescription2.Models.ActiveIngredientRecord", b =>
                {
                    b.Property<int>("ActiveIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIngredientId"), 1L, 1);

                    b.Property<string>("ActiveIngredientName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveIngredientId");

                    b.ToTable("ActiveIngredientRecords", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("HealthCouncilRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighestQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MedicalPracticeRecordsPracticeNumberId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("PracticeNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalPracticeRecordsPracticeNumberId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.ChronicCondition", b =>
                {
                    b.Property<int>("ChronicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicId"), 1L, 1);

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChronicId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("UserId");

                    b.ToTable("ChricConditions", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.ChronicMedication", b =>
                {
                    b.Property<int>("ChronicMedi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicMedi"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChronicMedi");

                    b.HasIndex("MedicationId");

                    b.HasIndex("UserId");

                    b.ToTable("ChronicMedications", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICD_10_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionId");

                    b.ToTable("Conditions", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.ContraIndication", b =>
                {
                    b.Property<int>("ContraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContraId"), 1L, 1);

                    b.Property<int>("ActiveIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.HasKey("ContraId");

                    b.HasIndex("ActiveIngredientId");

                    b.HasIndex("ConditionId");

                    b.ToTable("ContraIndications", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.DispenseDetails", b =>
                {
                    b.Property<int>("DispenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispenseId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PharmacistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int?>("RepeatsLeft")
                        .HasColumnType("int");

                    b.HasKey("DispenseId");

                    b.HasIndex("PharmacistId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("DispenseDetails", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.DosageForm", b =>
                {
                    b.Property<int>("DosageFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DosageFormId"), 1L, 1);

                    b.Property<string>("DosageFormName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosageFormId");

                    b.ToTable("DosageForms", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.DrugAllergy", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugId"), 1L, 1);

                    b.Property<int?>("ActiveIngredientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DrugId");

                    b.HasIndex("ActiveIngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("DrugAllergies", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.MedicalPracticeRecord", b =>
                {
                    b.Property<int>("PracticeNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PracticeNumberId"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<string>("PracticeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("PracticeNumberId");

                    b.HasIndex("CityId");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.ToTable("MedicalPracticeRecords", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.MedicationActiveIngredient", b =>
                {
                    b.Property<int>("MediActiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediActiveId"), 1L, 1);

                    b.Property<int?>("ActiveIngredientId1")
                        .HasColumnType("int");

                    b.Property<int?>("ActiveIngredientId2")
                        .HasColumnType("int");

                    b.Property<int?>("ActiveIngredientId3")
                        .HasColumnType("int");

                    b.Property<int?>("ActiveIngredientId4")
                        .HasColumnType("int");

                    b.Property<int?>("DosageFormId")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediActiveId");

                    b.HasIndex("ActiveIngredientId1");

                    b.HasIndex("ActiveIngredientId2");

                    b.HasIndex("ActiveIngredientId3");

                    b.HasIndex("ActiveIngredientId4");

                    b.HasIndex("DosageFormId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("MedicationActiveIngredient", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.MedicationInteraction", b =>
                {
                    b.Property<int>("MediInteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediInteractionId"), 1L, 1);

                    b.Property<int?>("ActiveOne")
                        .HasColumnType("int");

                    b.Property<int?>("ActiveTwo")
                        .HasColumnType("int");

                    b.HasKey("MediInteractionId");

                    b.HasIndex("ActiveOne");

                    b.HasIndex("ActiveTwo");

                    b.ToTable("MedicationInteractions", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.PharmacyRecord", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyId"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("SuburbId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PharmacyId");

                    b.HasIndex("CityId");

                    b.HasIndex("PostalCodeId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SuburbId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("PharmacyRecords", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.PostalCode", b =>
                {
                    b.Property<int>("PostalCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostalCodeId"), 1L, 1);

                    b.Property<string>("PostalCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalCodeId");

                    b.ToTable("PostalCodes", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientID");

                    b.ToTable("Prescriptions", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.PrescriptionLine", b =>
                {
                    b.Property<int>("PrescriptionLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionLineId"), 1L, 1);

                    b.Property<int?>("DispenseId")
                        .HasColumnType("int");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Repeats")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionLineId");

                    b.HasIndex("DispenseId");

                    b.HasIndex("MedicationId");

                    b.ToTable("PrescriptionLines", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuburbId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("int");

                    b.Property<string>("SuburbName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("Suburbs", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("E_Prescription2.Models.ApplicationUser", b =>
                {
                    b.HasOne("E_Prescription2.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("E_Prescription2.Models.Gender", "Genders")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("E_Prescription2.Models.MedicalPracticeRecord", "MedicalPracticeRecords")
                        .WithMany()
                        .HasForeignKey("MedicalPracticeRecordsPracticeNumberId");

                    b.HasOne("E_Prescription2.Models.PostalCode", "PostalCodes")
                        .WithMany()
                        .HasForeignKey("PostalCodeId");

                    b.HasOne("E_Prescription2.Models.Province", "Provinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("E_Prescription2.Models.Suburb", "Suburbs")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.Navigation("Cities");

                    b.Navigation("Genders");

                    b.Navigation("MedicalPracticeRecords");

                    b.Navigation("PostalCodes");

                    b.Navigation("Provinces");

                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("E_Prescription2.Models.ChronicCondition", b =>
                {
                    b.HasOne("E_Prescription2.Models.Condition", "Conditions")
                        .WithMany()
                        .HasForeignKey("ConditionId");

                    b.HasOne("E_Prescription2.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Conditions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Prescription2.Models.ChronicMedication", b =>
                {
                    b.HasOne("E_Prescription2.Models.MedicationActiveIngredient", "MediActiveIngredient")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.HasOne("E_Prescription2.Models.ApplicationUser", "PatientUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("MediActiveIngredient");

                    b.Navigation("PatientUser");
                });

            modelBuilder.Entity("E_Prescription2.Models.City", b =>
                {
                    b.HasOne("E_Prescription2.Models.Province", "Provinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("E_Prescription2.Models.ContraIndication", b =>
                {
                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientRecords")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Prescription2.Models.Condition", "Conditions")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredientRecords");

                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("E_Prescription2.Models.DispenseDetails", b =>
                {
                    b.HasOne("E_Prescription2.Models.ApplicationUser", "PharmacistUser")
                        .WithMany()
                        .HasForeignKey("PharmacistId");

                    b.HasOne("E_Prescription2.Models.PharmacyRecord", "PharmacyRecords")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.Navigation("PharmacistUser");

                    b.Navigation("PharmacyRecords");
                });

            modelBuilder.Entity("E_Prescription2.Models.DrugAllergy", b =>
                {
                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientRecords")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientId");

                    b.HasOne("E_Prescription2.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ActiveIngredientRecords");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Prescription2.Models.MedicalPracticeRecord", b =>
                {
                    b.HasOne("E_Prescription2.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("E_Prescription2.Models.PostalCode", "PostalCodes")
                        .WithMany()
                        .HasForeignKey("PostalCodeId");

                    b.HasOne("E_Prescription2.Models.Province", "Provinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("E_Prescription2.Models.Suburb", "Suburbs")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.Navigation("Cities");

                    b.Navigation("PostalCodes");

                    b.Navigation("Provinces");

                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("E_Prescription2.Models.MedicationActiveIngredient", b =>
                {
                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientRecord1")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientId1");

                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientRecord2")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientId2");

                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientRecord3")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientId3");

                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientRecord4")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientId4");

                    b.HasOne("E_Prescription2.Models.DosageForm", "DosageForms")
                        .WithMany()
                        .HasForeignKey("DosageFormId");

                    b.HasOne("E_Prescription2.Models.Schedule", "Schedules")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("ActiveIngredientRecord1");

                    b.Navigation("ActiveIngredientRecord2");

                    b.Navigation("ActiveIngredientRecord3");

                    b.Navigation("ActiveIngredientRecord4");

                    b.Navigation("DosageForms");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("E_Prescription2.Models.MedicationInteraction", b =>
                {
                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientOne")
                        .WithMany()
                        .HasForeignKey("ActiveOne");

                    b.HasOne("E_Prescription2.Models.ActiveIngredientRecord", "ActiveIngredientTwo")
                        .WithMany()
                        .HasForeignKey("ActiveTwo");

                    b.Navigation("ActiveIngredientOne");

                    b.Navigation("ActiveIngredientTwo");
                });

            modelBuilder.Entity("E_Prescription2.Models.PharmacyRecord", b =>
                {
                    b.HasOne("E_Prescription2.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("E_Prescription2.Models.PostalCode", "PostalCodes")
                        .WithMany()
                        .HasForeignKey("PostalCodeId");

                    b.HasOne("E_Prescription2.Models.Province", "Provinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("E_Prescription2.Models.Suburb", "Suburbs")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.HasOne("E_Prescription2.Models.ApplicationUser", "User")
                        .WithOne("PharmacyRecords")
                        .HasForeignKey("E_Prescription2.Models.PharmacyRecord", "UserId");

                    b.Navigation("Cities");

                    b.Navigation("PostalCodes");

                    b.Navigation("Provinces");

                    b.Navigation("Suburbs");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Prescription2.Models.Prescription", b =>
                {
                    b.HasOne("E_Prescription2.Models.ApplicationUser", "DoctorUser")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("E_Prescription2.Models.ApplicationUser", "PatientUser")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.Navigation("DoctorUser");

                    b.Navigation("PatientUser");
                });

            modelBuilder.Entity("E_Prescription2.Models.PrescriptionLine", b =>
                {
                    b.HasOne("E_Prescription2.Models.DispenseDetails", "dispenseDetails")
                        .WithMany()
                        .HasForeignKey("DispenseId");

                    b.HasOne("E_Prescription2.Models.MedicationActiveIngredient", "medicationActive")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.Navigation("dispenseDetails");

                    b.Navigation("medicationActive");
                });

            modelBuilder.Entity("E_Prescription2.Models.Suburb", b =>
                {
                    b.HasOne("E_Prescription2.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Prescription2.Models.PostalCode", "PostalCodes")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("PostalCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Prescription2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Prescription2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Prescription2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Prescription2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Prescription2.Models.ApplicationUser", b =>
                {
                    b.Navigation("PharmacyRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
